{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alexis/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/MyPlates/0.NextJs/ts-minin/pages/post/[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport MainLayout from '../../components/MainLayout';\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var serverPost = _ref.post,\n      pageId = _ref.pageId;\n\n  var _useState = useState(serverPost),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    var load = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:3001/posts/\".concat(router.query.id));\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return res.json();\n\n              case 5:\n                data = _context.sent;\n                setPost(data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function load() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (!post) {\n      load();\n    }\n  }, []);\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, _this);\n  }\n\n  console.log('router', router);\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    title: \"post \\u2116\".concat(router.query.id),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        display: 'inline-block',\n        marginRight: '10px'\n      },\n      children: [\"Post \\u2116\", router.query.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        display: 'inline-block'\n      },\n      children: [\"Post: \", pageId, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/posts\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Back to posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, _this);\n}; // Post.getInitialProps = async ({ query, req }) => {\n// \tconsole.log('ctx', query, req)\n// \t// Обозначает что мы еще не на фронтенде\n// \tif (!req) {\n// \t\treturn { post: null }\n// \t}\n// \tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n// \tconst post = await res.json()\n// \tlet pageId = query.id\n// \treturn { post, pageId }\n// }\n\n\n_s(Post, \"k7sF1YLvJL6hkkXaf/jroV70/AU=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\nexport var __N_SSP = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/alexis/Рабочий стол/MyPlates/0.NextJs/ts-minin/pages/post/[id].tsx"],"names":["useState","useEffect","useRouter","Link","MainLayout","Post","serverPost","post","pageId","setPost","router","load","fetch","query","id","res","json","data","console","log","display","marginRight","title","body"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AASA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAiD;AAAA;;AAAA,MAAxCC,UAAwC,QAA9CC,IAA8C;AAAA,MAA5BC,MAA4B,QAA5BA,MAA4B;;AAAA,kBACrCR,QAAQ,CAACM,UAAD,CAD6B;AAAA,MACtDC,IADsD;AAAA,MAChDE,OADgD;;AAE7D,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMU,IAAI;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACMC,KAAK,uCAAgCF,MAAM,CAACG,KAAP,CAAaC,EAA7C,EADX;;AAAA;AACNC,gBAAAA,GADM;AAAA;AAAA,uBAEOA,GAAG,CAACC,IAAJ,EAFP;;AAAA;AAENC,gBAAAA,IAFM;AAGZR,gBAAAA,OAAO,CAACQ,IAAD,CAAP;;AAHY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAJN,IAAI;AAAA;AAAA;AAAA,OAAV;;AAKA,QAAI,CAACJ,IAAL,EAAW;AACVI,MAAAA,IAAI;AACJ;AACD,GATQ,EASN,EATM,CAAT;;AAWA,MAAI,CAACJ,IAAL,EAAW;AACV,wBACC,QAAC,UAAD;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,aADD;AAKA;;AAEDW,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,MAAtB;AACA,sBACC,QAAC,UAAD;AAAY,IAAA,KAAK,uBAAWA,MAAM,CAACG,KAAP,CAAaC,EAAxB,CAAjB;AAAA,4BACC;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,OAAO,EAAE,cAAX;AAA2BC,QAAAA,WAAW,EAAE;AAAxC,OAAX;AAAA,gCACQX,MAAM,CAACG,KAAP,CAAaC,EADrB;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,eAIC;AAAI,MAAA,KAAK,EAAE;AAAEM,QAAAA,OAAO,EAAE;AAAX,OAAX;AAAA,2BAA+CZ,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,aAJD,eAKC;AAAA;AAAA;AAAA;AAAA,aALD,eAMC;AAAA,gBAAKD,IAAI,CAACe;AAAV;AAAA;AAAA;AAAA;AAAA,aAND,eAOC;AAAA,gBAAKf,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,aAPD,eAQC;AAAA;AAAA;AAAA;AAAA,aARD,eASC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,aATD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAeA,CAvCD,C,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnDMlB,I;UAEUH,S;;;KAFVG,I;;AAuEN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Link from 'next/link'\nimport MainLayout from '../../components/MainLayout'\nimport { NextPageContext } from 'next'\nimport { MyPost } from '../../interfaces/post'\n\ninterface PostPageProps {\n\tpost: MyPost\n\tpageId: string | number\n}\n\nconst Post = ({ post: serverPost, pageId }: PostPageProps) => {\n\tconst [post, setPost] = useState(serverPost)\n\tconst router = useRouter()\n\n\tuseEffect(() => {\n\t\tconst load = async () => {\n\t\t\tconst res = await fetch(`http://localhost:3001/posts/${router.query.id}`)\n\t\t\tconst data = await res.json()\n\t\t\tsetPost(data)\n\t\t}\n\t\tif (!post) {\n\t\t\tload()\n\t\t}\n\t}, [])\n\n\tif (!post) {\n\t\treturn (\n\t\t\t<MainLayout>\n\t\t\t\t<h1>Loading...</h1>\n\t\t\t</MainLayout>\n\t\t)\n\t}\n\n\tconsole.log('router', router)\n\treturn (\n\t\t<MainLayout title={`post №${router.query.id}`}>\n\t\t\t<h1 style={{ display: 'inline-block', marginRight: '10px' }}>\n\t\t\t\tPost №{router.query.id}\n\t\t\t</h1>\n\t\t\t<h1 style={{ display: 'inline-block' }}>Post: {pageId} </h1>\n\t\t\t<hr />\n\t\t\t<h2>{post.title}</h2>\n\t\t\t<h3>{post.body}</h3>\n\t\t\t<hr />\n\t\t\t<Link href='/posts'>\n\t\t\t\t<h3>Back to posts</h3>\n\t\t\t</Link>\n\t\t</MainLayout>\n\t)\n}\n\n// Post.getInitialProps = async ({ query, req }) => {\n// \tconsole.log('ctx', query, req)\n// \t// Обозначает что мы еще не на фронтенде\n// \tif (!req) {\n// \t\treturn { post: null }\n// \t}\n// \tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n// \tconst post = await res.json()\n// \tlet pageId = query.id\n// \treturn { post, pageId }\n// }\n\ninterface PostNextPageContext extends NextPageContext {\n\tquery: {\n\t\tid: string\n\t}\n}\n\nexport async function getServerSideProps({ query, req }: PostNextPageContext) {\n\tconsole.log('ctx', query, req)\n\t// Здесь можно не опасаться и не делать такую проверку:\n\t// if (!req) {\n\t// \treturn { post: null }\n\t// }\n\tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n\tconst post: MyPost = await res.json()\n\tlet pageId = query.id\n\treturn { props: { post, pageId } }\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}