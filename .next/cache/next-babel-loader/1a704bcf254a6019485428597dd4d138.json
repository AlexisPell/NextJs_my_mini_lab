{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/alexis/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/MyPlates/0.NextJs/ts-minin/pages/post/[id].tsx\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport MainLayout from '../../components/MainLayout';\n\nconst Post = ({\n  post: serverPost,\n  pageId\n}) => {\n  const {\n    0: post,\n    1: setPost\n  } = useState(serverPost);\n  const router = useRouter();\n  useEffect(() => {\n    const load = async () => {\n      const res = await fetch(`http://localhost:3001/posts/${router.query.id}`);\n      const data = await res.json();\n      setPost(data);\n    };\n\n    if (!post) {\n      load();\n    }\n  }, []);\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this);\n  }\n\n  console.log('router', router);\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    title: `post №${router.query.id}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        display: 'inline-block',\n        marginRight: '10px'\n      },\n      children: [\"Post \\u2116\", router.query.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        display: 'inline-block'\n      },\n      children: [\"Post: \", pageId, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/posts\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Back to posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n}; // Post.getInitialProps = async ({ query, req }) => {\n// \tconsole.log('ctx', query, req)\n// \t// Обозначает что мы еще не на фронтенде\n// \tif (!req) {\n// \t\treturn { post: null }\n// \t}\n// \tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n// \tconst post = await res.json()\n// \tlet pageId = query.id\n// \treturn { post, pageId }\n// }\n\n\nexport async function getServerSideProps({\n  query,\n  req\n}) {\n  console.log('ctx', query, req); // Здесь можно не опасаться и не делать такую проверку:\n  // if (!req) {\n  // \treturn { post: null }\n  // }\n\n  const res = await fetch(`http://localhost:3001/posts/${query.id}`);\n  const post = await res.json();\n  let pageId = query.id;\n  return {\n    props: {\n      post,\n      pageId\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["/home/alexis/Рабочий стол/MyPlates/0.NextJs/ts-minin/pages/post/[id].tsx"],"names":["useState","useEffect","useRouter","Link","MainLayout","Post","post","serverPost","pageId","setPost","router","load","res","fetch","query","id","data","json","console","log","display","marginRight","title","body","getServerSideProps","req","props"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAAkC;AAC9C,QAAM;AAAA,OAACF,IAAD;AAAA,OAAOG;AAAP,MAAkBT,QAAQ,CAACO,UAAD,CAAhC;AACA,QAAMG,MAAM,GAAGR,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMU,IAAI,GAAG,YAAY;AACxB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BH,MAAM,CAACI,KAAP,CAAaC,EAAG,EAAhD,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAR,MAAAA,OAAO,CAACO,IAAD,CAAP;AACA,KAJD;;AAKA,QAAI,CAACV,IAAL,EAAW;AACVK,MAAAA,IAAI;AACJ;AACD,GATQ,EASN,EATM,CAAT;;AAWA,MAAI,CAACL,IAAL,EAAW;AACV,wBACC,QAAC,UAAD;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;;AAEDY,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,MAAtB;AACA,sBACC,QAAC,UAAD;AAAY,IAAA,KAAK,EAAG,SAAQA,MAAM,CAACI,KAAP,CAAaC,EAAG,EAA5C;AAAA,4BACC;AAAI,MAAA,KAAK,EAAE;AAAEK,QAAAA,OAAO,EAAE,cAAX;AAA2BC,QAAAA,WAAW,EAAE;AAAxC,OAAX;AAAA,gCACQX,MAAM,CAACI,KAAP,CAAaC,EADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAIC;AAAI,MAAA,KAAK,EAAE;AAAEK,QAAAA,OAAO,EAAE;AAAX,OAAX;AAAA,2BAA+CZ,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD,eAKC;AAAA;AAAA;AAAA;AAAA,YALD,eAMC;AAAA,gBAAKF,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,YAND,eAOC;AAAA,gBAAKhB,IAAI,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA,YAPD,eAQC;AAAA;AAAA;AAAA;AAAA,YARD,eASC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA,CAvCD,C,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,kBAAf,CAAkC;AAAEV,EAAAA,KAAF;AAASW,EAAAA;AAAT,CAAlC,EAAkD;AACxDP,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,KAAnB,EAA0BW,GAA1B,EADwD,CAExD;AACA;AACA;AACA;;AACA,QAAMb,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BC,KAAK,CAACC,EAAG,EAAzC,CAAvB;AACA,QAAMT,IAAI,GAAG,MAAMM,GAAG,CAACK,IAAJ,EAAnB;AACA,MAAIT,MAAM,GAAGM,KAAK,CAACC,EAAnB;AACA,SAAO;AAAEW,IAAAA,KAAK,EAAE;AAAEpB,MAAAA,IAAF;AAAQE,MAAAA;AAAR;AAAT,GAAP;AACA;AAED,eAAeH,IAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Link from 'next/link'\nimport MainLayout from '../../components/MainLayout'\n\nconst Post = ({ post: serverPost, pageId }) => {\n\tconst [post, setPost] = useState(serverPost)\n\tconst router = useRouter()\n\n\tuseEffect(() => {\n\t\tconst load = async () => {\n\t\t\tconst res = await fetch(`http://localhost:3001/posts/${router.query.id}`)\n\t\t\tconst data = await res.json()\n\t\t\tsetPost(data)\n\t\t}\n\t\tif (!post) {\n\t\t\tload()\n\t\t}\n\t}, [])\n\n\tif (!post) {\n\t\treturn (\n\t\t\t<MainLayout>\n\t\t\t\t<h1>Loading...</h1>\n\t\t\t</MainLayout>\n\t\t)\n\t}\n\n\tconsole.log('router', router)\n\treturn (\n\t\t<MainLayout title={`post №${router.query.id}`}>\n\t\t\t<h1 style={{ display: 'inline-block', marginRight: '10px' }}>\n\t\t\t\tPost №{router.query.id}\n\t\t\t</h1>\n\t\t\t<h1 style={{ display: 'inline-block' }}>Post: {pageId} </h1>\n\t\t\t<hr />\n\t\t\t<h2>{post.title}</h2>\n\t\t\t<h3>{post.body}</h3>\n\t\t\t<hr />\n\t\t\t<Link href='/posts'>\n\t\t\t\t<h3>Back to posts</h3>\n\t\t\t</Link>\n\t\t</MainLayout>\n\t)\n}\n\n// Post.getInitialProps = async ({ query, req }) => {\n// \tconsole.log('ctx', query, req)\n// \t// Обозначает что мы еще не на фронтенде\n// \tif (!req) {\n// \t\treturn { post: null }\n// \t}\n// \tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n// \tconst post = await res.json()\n// \tlet pageId = query.id\n// \treturn { post, pageId }\n// }\n\nexport async function getServerSideProps({ query, req }) {\n\tconsole.log('ctx', query, req)\n\t// Здесь можно не опасаться и не делать такую проверку:\n\t// if (!req) {\n\t// \treturn { post: null }\n\t// }\n\tconst res = await fetch(`http://localhost:3001/posts/${query.id}`)\n\tconst post = await res.json()\n\tlet pageId = query.id\n\treturn { props: { post, pageId } }\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}